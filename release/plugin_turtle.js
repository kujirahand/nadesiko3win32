/*! For license information please see plugin_turtle.js.LICENSE.txt */
!function(n){var t={};function e(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return n[r].call(s.exports,s,s.exports,e),s.l=!0,s.exports}e.m=n,e.c=t,e.d=function(n,t,r){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:r})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var s in n)e.d(r,s,function(t){return n[t]}.bind(null,s));return r},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=2)}({"./src/plugin_turtle.js":function(module,exports){eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Turtle Graphics for Web browser (nadesiko3)\n * plugin_turtle.js\n */\nvar PluginTurtle = {\n  '初期化': {\n    type: 'func',\n    josi: [],\n    fn: function fn(sys) {\n      if (sys._turtle) {\n        return;\n      }\n\n      sys._turtle = {\n        list: [],\n        target: -1,\n        ctx: null,\n        canvas: null,\n        canvas_r: {\n          left: 0,\n          top: 0,\n          width: 640,\n          height: 400\n        },\n        clearAll: function clearAll() {\n          var me = this;\n          console.log('[TURTLE] clearAll');\n\n          for (var i = 0; i < me.list.length; i++) {\n            var tt = me.list[i];\n            tt.mlist = []; // ジョブをクリア\n\n            document.body.removeChild(tt.canvas);\n          }\n\n          me.list = [];\n\n          if (me.canvas !== null) {\n            me.ctx.clearRect(0, 0, me.canvas.width, me.canvas.height);\n          }\n\n          me.target = -1;\n          me.flagSetTimer = false;\n        },\n        drawTurtle: function drawTurtle(id) {\n          var tt = this.list[id];\n          var cr = this.canvas_r; // カメの位置を移動\n\n          tt.canvas.style.left = cr.left + tt.x - tt.cx + 'px';\n          tt.canvas.style.top = cr.top + tt.y - tt.cx + 'px';\n\n          if (!tt.f_update) {\n            return;\n          }\n\n          if (!tt.flagLoaded) {\n            return;\n          }\n\n          tt.f_update = false;\n          tt.ctx.clearRect(0, 0, tt.canvas.width, tt.canvas.height);\n\n          if (!tt.f_visible) {\n            return;\n          }\n\n          if (tt.dir !== 270) {\n            var rad = (tt.dir + 90) * 0.017453292519943295;\n            tt.ctx.save();\n            tt.ctx.translate(tt.cx, tt.cy);\n            tt.ctx.rotate(rad);\n            tt.ctx.translate(-tt.cx, -tt.cy);\n            tt.ctx.drawImage(tt.img, 0, 0);\n            tt.ctx.restore();\n          } else {\n            tt.ctx.drawImage(tt.img, 0, 0);\n          }\n        },\n        getCur: function getCur() {\n          if (this.list.length === 0) {\n            throw Error('最初に『カメ作成』命令を呼び出してください。');\n          }\n\n          return this.list[this.target];\n        },\n        flagSetTimer: false,\n        setTimer: function setTimer() {\n          var _this = this;\n\n          if (this.flagSetTimer) {\n            return;\n          }\n\n          this.flagSetTimer = true;\n          setTimeout(function () {\n            var tt = _this.getCur();\n\n            console.log('[TURTLE] Let\\'s go! job=', tt.mlist.length);\n\n            sys._turtle.play();\n          }, 1);\n        },\n        line: function line(tt, x1, y1, x2, y2) {\n          if (tt) {\n            if (!tt.flagDown) {\n              return;\n            }\n          }\n\n          var ctx = this.ctx;\n          ctx.beginPath();\n          ctx.lineWidth = tt.lineWidth;\n          ctx.strokeStyle = tt.color;\n          ctx.moveTo(x1, y1);\n          ctx.lineTo(x2, y2);\n          ctx.stroke();\n        },\n        doMacro: function doMacro(tt, wait) {\n          var me = this;\n\n          if (!tt.flagLoaded && wait > 0) {\n            console.log('[TURTLE] waiting ...');\n            return true;\n          }\n\n          var m = tt.mlist.shift();\n          var cmd = m !== undefined ? m[0] : '';\n\n          switch (cmd) {\n            case 'xy':\n              // 起点を移動する\n              tt.x = m[1];\n              tt.y = m[2];\n              break;\n\n            case 'mv':\n              {\n                // 線を引く\n                me.line(tt, tt.x, tt.y, m[1], m[2]); // カメの角度を変更\n\n                var mvRad = Math.atan2(m[1] - tt.x, m[2] - tt.y);\n                tt.dir = mvRad * 57.29577951308232;\n                tt.f_update = true; // 実際に位置を移動\n\n                tt.x = m[1];\n                tt.y = m[2];\n                break;\n              }\n\n            case 'fd':\n              {\n                var fdv = m[1] * m[2];\n                var rad = tt.dir * 0.017453292519943295;\n                var x2 = tt.x + Math.cos(rad) * fdv;\n                var y2 = tt.y + Math.sin(rad) * fdv;\n                me.line(tt, tt.x, tt.y, x2, y2);\n                tt.x = x2;\n                tt.y = y2;\n                break;\n              }\n\n            case 'angle':\n              {\n                var angle = m[1];\n                tt.dir = (angle - 90 + 360) % 360;\n                tt.f_update = true;\n                break;\n              }\n\n            case 'rotr':\n              {\n                var rv = m[1];\n                tt.dir = (tt.dir + rv) % 360;\n                tt.f_update = true;\n                break;\n              }\n\n            case 'rotl':\n              {\n                var lv = m[1];\n                tt.dir = (tt.dir - lv + 360) % 360;\n                tt.f_update = true;\n                break;\n              }\n\n            case 'color':\n              tt.color = m[1];\n              break;\n\n            case 'size':\n              tt.lineWidth = m[1];\n              break;\n\n            case 'penOn':\n              tt.flagDown = m[1];\n              break;\n\n            case 'visible':\n              tt.f_visible = m[1];\n              tt.f_update = true;\n              break;\n\n            case 'changeImage':\n              tt.flagLoaded = false;\n              tt.img.src = m[1];\n              break;\n          }\n\n          if (tt.flagLoaded) {\n            sys._turtle.drawTurtle(tt.id);\n          }\n\n          return tt.mlist.length > 0;\n        },\n        doMacroAll: function doMacroAll(wait) {\n          var hasNext = false;\n\n          for (var i = 0; i < sys._turtle.list.length; i++) {\n            var tt = sys._turtle.list[i];\n\n            if (this.doMacro(tt, wait)) {\n              hasNext = true;\n            }\n          }\n\n          return hasNext;\n        },\n        play: function play() {\n          var me = this;\n\n          var wait = sys.__getSysValue('カメ速度', 100);\n\n          var hasNext = this.doMacroAll(wait);\n\n          if (wait <= 0) {\n            while (hasNext) {\n              hasNext = this.doMacroAll(wait);\n            }\n          } else if (hasNext) {\n            setTimeout(function () {\n              return me.play();\n            }, wait);\n            return;\n          }\n\n          console.log('[TURTLE] finished.');\n          me.flagSetTimer = false;\n        },\n        createTurtle: function createTurtle(imageUrl, sys) {\n          // カメの情報を sys._turtle リストに追加\n          var id = sys._turtle.list.length;\n          var tt = {\n            id: id,\n            img: null,\n            canvas: null,\n            ctx: null,\n            dir: 270,\n            // 上向き\n            cx: 32,\n            cy: 32,\n            x: 0,\n            y: 0,\n            color: 'black',\n            lineWidth: 4,\n            flagDown: true,\n            f_update: true,\n            flagLoaded: false,\n            f_visible: true,\n            mlist: []\n          };\n\n          sys._turtle.list.push(tt);\n\n          sys._turtle.target = id; // 画像を読み込む\n\n          tt.img = document.createElement('img');\n          tt.canvas = document.createElement('canvas');\n          tt.ctx = tt.canvas.getContext('2d');\n          tt.canvas.id = id;\n          tt.img.src = imageUrl;\n\n          tt.img.onload = function () {\n            tt.cx = tt.img.width / 2;\n            tt.cy = tt.img.height / 2;\n            tt.canvas.width = tt.img.width;\n            tt.canvas.height = tt.img.height;\n            tt.flagLoaded = true;\n\n            sys._turtle.drawTurtle(tt.id);\n\n            console.log('turtle.onload');\n          };\n\n          tt.img.onerror = function () {\n            console.log('カメの読み込みに失敗');\n            tt.flagLoaded = true;\n            tt.f_visible = false;\n\n            sys._turtle.drawTurtle(tt.id);\n          };\n\n          tt.canvas.style.position = 'absolute';\n          document.body.appendChild(tt.canvas); // 描画先をセットする\n\n          var canvasId = sys.__getSysValue('カメ描画先', 'turtle_cv');\n\n          if (typeof canvasId === 'string') {\n            canvasId = document.getElementById(canvasId) || document.querySelector(canvasId);\n            sys.__v0['カメ描画先'] = canvasId;\n          }\n\n          console.log('カメ描画先=', canvasId);\n          var cv = sys._turtle.canvas = canvasId;\n\n          if (!cv) {\n            console.log('[ERROR] カメ描画先が見当たりません。' + canvasId);\n            return;\n          }\n\n          var ctx = sys._turtle.ctx = sys._turtle.canvas.getContext('2d');\n\n          ctx.lineWidth = 4;\n          ctx.strokeStyle = 'black';\n          ctx.lineCap = 'round';\n          var rect = cv.getBoundingClientRect();\n          var rx = rect.left + window.pageXOffset;\n          var ry = rect.top + window.pageYOffset;\n          sys._turtle.canvas_r = {\n            'left': rx,\n            'top': ry,\n            width: rect.width,\n            height: rect.height\n          }; // デフォルト位置の設定\n\n          tt.x = rect.width / 2;\n          tt.y = rect.height / 2;\n          return id;\n        }\n      };\n    }\n  },\n  // @タートルグラフィックス/カメ操作\n  'カメ作成': {\n    // @タートルグラフィックスを開始してカメのIDを返す // @かめさくせい\n    type: 'func',\n    josi: [],\n    fn: function fn(sys) {\n      var imageUrl = sys.__getSysValue('カメ画像URL', 'turtle.png');\n\n      return sys._turtle.createTurtle(imageUrl, sys);\n    }\n  },\n  'ゾウ作成': {\n    // @ゾウの画像でタートルグラフィックスを開始してIDを返す // @ぞうさくせい\n    type: 'func',\n    josi: [],\n    fn: function fn(sys) {\n      var imageUrl = 'turtle-elephant.png';\n      return sys._turtle.createTurtle(imageUrl, sys);\n    }\n  },\n  'パンダ作成': {\n    // @パンダの画像でタートルグラフィックスを開始してIDを返す // @ぱんださくせい\n    type: 'func',\n    josi: [],\n    fn: function fn(sys) {\n      var imageUrl = 'turtle-panda.png';\n      return sys._turtle.createTurtle(imageUrl, sys);\n    }\n  },\n  'カメ操作対象設定': {\n    // @IDを指定して操作対象となるカメを変更する // @かめそうさたいしょうせってい\n    type: 'func',\n    josi: [['に', 'へ', 'の']],\n    fn: function fn(id, sys) {\n      sys._turtle.target = id;\n    },\n    return_none: true\n  },\n  'カメ描画先': {\n    type: 'var',\n    value: 'turtle_cv'\n  },\n  // @かめびょうがさき\n  'カメ画像URL': {\n    type: 'var',\n    value: 'turtle.png'\n  },\n  // @かめがぞうURL\n  'カメ画像変更': {\n    // @カメの画像をURLに変更する // @かめがぞうへんこう\n    type: 'func',\n    josi: [['に', 'へ']],\n    fn: function fn(url, sys) {\n      var tt = sys._turtle.getCur();\n\n      tt.mlist.push(['changeImage', url]);\n\n      sys._turtle.setTimer();\n    },\n    return_none: true\n  },\n  'カメ速度': {\n    type: 'const',\n    value: 100\n  },\n  // @かめそくど\n  'カメ速度設定': {\n    // @カメの動作速度vに設定(大きいほど遅い) // @かめそくどせってい\n    type: 'func',\n    josi: [['に', 'へ']],\n    fn: function fn(v, sys) {\n      sys.__varslist[0]['カメ速度'] = v;\n    }\n  },\n  'カメ移動': {\n    // @カメの位置を[x,y]へ移動する // @かめいどう\n    type: 'func',\n    josi: [['に', 'へ']],\n    fn: function fn(xy, sys) {\n      var tt = sys._turtle.getCur();\n\n      tt.mlist.push(['mv', xy[0], xy[1]]);\n\n      sys._turtle.setTimer();\n    },\n    return_none: true\n  },\n  'カメ起点移動': {\n    // @カメの描画起点位置を[x,y]へ移動する // @かめきてんいどう\n    type: 'func',\n    josi: [['に', 'へ']],\n    fn: function fn(xy, sys) {\n      var tt = sys._turtle.getCur();\n\n      tt.mlist.push(['xy', xy[0], xy[1]]);\n\n      sys._turtle.setTimer();\n    },\n    return_none: true\n  },\n  'カメ進': {\n    // @カメの位置をVだけ進める // @かめすすむ\n    type: 'func',\n    josi: [['だけ']],\n    fn: function fn(v, sys) {\n      var tt = sys._turtle.getCur();\n\n      tt.mlist.push(['fd', v, 1]);\n\n      sys._turtle.setTimer();\n    },\n    return_none: true\n  },\n  'カメ戻': {\n    // @カメの位置をVだけ戻す // @かめもどる\n    type: 'func',\n    josi: [['だけ']],\n    fn: function fn(v, sys) {\n      var tt = sys._turtle.getCur();\n\n      tt.mlist.push(['fd', v, -1]);\n\n      sys._turtle.setTimer();\n    },\n    return_none: true\n  },\n  'カメ角度設定': {\n    // @カメの向きをDEGに設定する // @かめかくどせってい\n    type: 'func',\n    josi: [['に', 'へ', 'の']],\n    fn: function fn(v, sys) {\n      var tt = sys._turtle.getCur();\n\n      tt.mlist.push(['angle', parseFloat(v)]);\n\n      sys._turtle.setTimer();\n    },\n    return_none: true\n  },\n  'カメ右回転': {\n    // @カメの向きをDEGだけ右に向ける // @かめみぎかいてん\n    type: 'func',\n    josi: [['だけ']],\n    fn: function fn(v, sys) {\n      var tt = sys._turtle.getCur();\n\n      tt.mlist.push(['rotr', v]);\n\n      sys._turtle.setTimer();\n    },\n    return_none: true\n  },\n  'カメ左回転': {\n    // @カメの向きをDEGだけ左に向ける // @かめひだりかいてん\n    type: 'func',\n    josi: [['だけ']],\n    fn: function fn(v, sys) {\n      var tt = sys._turtle.getCur();\n\n      tt.mlist.push(['rotl', v]);\n\n      sys._turtle.setTimer();\n    },\n    return_none: true\n  },\n  'カメペン色設定': {\n    // @カメのペン描画色をCに設定する // @かめぺんいろせってい\n    type: 'func',\n    josi: [['に', 'へ']],\n    fn: function fn(c, sys) {\n      var tt = sys._turtle.getCur();\n\n      tt.mlist.push(['color', c]);\n\n      sys._turtle.setTimer();\n    },\n    return_none: true\n  },\n  'カメペンサイズ設定': {\n    // @カメペンのサイズをWに設定する // @かめぺんさいずせってい\n    type: 'func',\n    josi: [['に', 'へ']],\n    fn: function fn(w, sys) {\n      var tt = sys._turtle.getCur();\n\n      tt.mlist.push(['size', w]);\n\n      sys._turtle.setTimer();\n    }\n  },\n  'カメペン設定': {\n    // @カメペンを使うかどうかをV(オン/オフ)に設定する // @かめぺんせってい\n    type: 'func',\n    josi: [['に', 'へ']],\n    fn: function fn(w, sys) {\n      var tt = sys._turtle.getCur();\n\n      tt.mlist.push(['penOn', w]);\n\n      sys._turtle.setTimer();\n    }\n  },\n  'カメ全消去': {\n    // @表示しているカメと描画内容を全部消去する // @かめぜんしょうきょ\n    type: 'func',\n    josi: [],\n    fn: function fn(sys) {\n      sys._turtle.clearAll();\n    },\n    return_none: true\n  },\n  'カメ非表示': {\n    // @カメの画像を非表示にする。描画に影響しない。 // @かめひひょうじ\n    type: 'func',\n    josi: [],\n    fn: function fn(sys) {\n      var tt = sys._turtle.getCur();\n\n      tt.mlist.push(['visible', false]);\n\n      sys._turtle.setTimer();\n    },\n    return_none: true\n  },\n  'カメ表示': {\n    // @非表示にしたカメを表示する。 // @かめひょうじ\n    type: 'func',\n    josi: [],\n    fn: function fn(sys) {\n      var tt = sys._turtle.getCur();\n\n      tt.mlist.push(['visible', true]);\n\n      sys._turtle.setTimer();\n    },\n    return_none: true\n  },\n  'カメクリック時': {\n    // @ 操作対象のカメをクリックした時のイベントを設定する // @かめくりっくしたとき\n    type: 'func',\n    josi: [['を']],\n    fn: function fn(func, sys) {\n      func = sys.__findVar(func, null); // 文字列指定なら関数に変換\n\n      var tid = sys._turtle.target;\n      var tt = sys._turtle.list[tid];\n\n      tt.canvas.onclick = function (e) {\n        sys.__v0['対象'] = e.target;\n        return func(e, sys);\n      };\n    },\n    return_none: true\n  }\n};\nmodule.exports = PluginTurtle; // scriptタグで取り込んだ時、自動で登録する\n\nif ((typeof navigator === \"undefined\" ? \"undefined\" : _typeof(navigator)) === 'object') {\n  navigator.nako3.addPluginObject('PluginTurtle', PluginTurtle);\n}\n\n//# sourceURL=webpack:///./src/plugin_turtle.js?")},2:function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__(/*! /Users/kujiramac/repos/nadesiko3/src/plugin_turtle.js */"./src/plugin_turtle.js");\n\n\n//# sourceURL=webpack:///multi_./src/plugin_turtle.js?')}});